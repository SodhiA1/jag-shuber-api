package ca.bc.gov.jag.shuber.persistence.model;

import ca.bc.gov.jag.shuber.persistence.AbstractAuditableVersionable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import org.hibernate.annotations.GenericGenerator;

/**
 * ShiftTemplate generated by Hibernate Tools hbm2java.
 *
 * <p>Domain model for database table shift_template.
 *
 * @author hbm2java
 * @version 344
 */
@Entity
@Table(name = "shift_template"
    // ,schema="shersched"
)
public class ShiftTemplate extends AbstractAuditableVersionable implements Serializable {

    /** UID. */
    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(generator = "uuid2")
    @GenericGenerator(name = "uuid2", strategy = "uuid2")
    @Column(name = "shift_template_id", nullable = false, updatable = false)
    private UUID shiftTemplateId;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "recurrence_id")
    private Recurrence recurrence;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "work_section_code")
    private WorkSectionCode workSectionCode;

    @NotNull
    @Column(name = "location_id", nullable = false)
    private UUID locationId;

    @NotNull
    @Column(name = "rotation_sequence", nullable = false)
    private int rotationSequence;

    @Temporal(TemporalType.TIME)
    @Column(name = "shift_start_time", length = 15)
    private Date shiftStartTime;

    @Temporal(TemporalType.TIME)
    @Column(name = "shift_end_time", length = 15)
    private Date shiftEndTime;

    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "shiftTemplate")
    private List<AssignmentTemplate> assignmentTemplates = new ArrayList<AssignmentTemplate>(0);

    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "shiftTemplate")
    private List<Shift> shifts = new ArrayList<Shift>(0);
    /** No args constructor. */
    public ShiftTemplate() {}

    /** Required args constructor. */
    public ShiftTemplate(
            UUID shiftTemplateId,
            UUID locationId,
            int rotationSequence,
            String createdBy,
            String updatedBy,
            Date createdDtm,
            Date updatedDtm,
            long revisionCount) {
        this.shiftTemplateId = shiftTemplateId;
        this.locationId = locationId;
        this.rotationSequence = rotationSequence;
        this.createdBy = createdBy;
        this.updatedBy = updatedBy;
        this.createdDtm = createdDtm;
        this.updatedDtm = updatedDtm;
        this.revisionCount = revisionCount;
    }

    /** All args constructor. */
    public ShiftTemplate(
            UUID shiftTemplateId,
            Recurrence recurrence,
            WorkSectionCode workSectionCode,
            UUID locationId,
            int rotationSequence,
            Date shiftStartTime,
            Date shiftEndTime,
            String createdBy,
            String updatedBy,
            Date createdDtm,
            Date updatedDtm,
            long revisionCount,
            List<AssignmentTemplate> assignmentTemplates,
            List<Shift> shifts) {
        this.shiftTemplateId = shiftTemplateId;
        this.recurrence = recurrence;
        this.workSectionCode = workSectionCode;
        this.locationId = locationId;
        this.rotationSequence = rotationSequence;
        this.shiftStartTime = shiftStartTime;
        this.shiftEndTime = shiftEndTime;
        this.createdBy = createdBy;
        this.updatedBy = updatedBy;
        this.createdDtm = createdDtm;
        this.updatedDtm = updatedDtm;
        this.revisionCount = revisionCount;
        this.assignmentTemplates = assignmentTemplates;
        this.shifts = shifts;
    }

    public UUID getShiftTemplateId() {
        return this.shiftTemplateId;
    }

    public void setShiftTemplateId(UUID shiftTemplateId) {
        this.shiftTemplateId = shiftTemplateId;
    }

    public Recurrence getRecurrence() {
        return this.recurrence;
    }

    public void setRecurrence(Recurrence recurrence) {
        this.recurrence = recurrence;
    }

    public WorkSectionCode getWorkSectionCode() {
        return this.workSectionCode;
    }

    public void setWorkSectionCode(WorkSectionCode workSectionCode) {
        this.workSectionCode = workSectionCode;
    }

    public UUID getLocationId() {
        return this.locationId;
    }

    public void setLocationId(UUID locationId) {
        this.locationId = locationId;
    }

    public int getRotationSequence() {
        return this.rotationSequence;
    }

    public void setRotationSequence(int rotationSequence) {
        this.rotationSequence = rotationSequence;
    }

    public Date getShiftStartTime() {
        return this.shiftStartTime;
    }

    public void setShiftStartTime(Date shiftStartTime) {
        this.shiftStartTime = shiftStartTime;
    }

    public Date getShiftEndTime() {
        return this.shiftEndTime;
    }

    public void setShiftEndTime(Date shiftEndTime) {
        this.shiftEndTime = shiftEndTime;
    }

    public List<AssignmentTemplate> getAssignmentTemplates() {
        return this.assignmentTemplates;
    }

    public void setAssignmentTemplates(List<AssignmentTemplate> assignmentTemplates) {
        this.assignmentTemplates = assignmentTemplates;
    }

    public List<Shift> getShifts() {
        return this.shifts;
    }

    public void setShifts(List<Shift> shifts) {
        this.shifts = shifts;
    }
}
