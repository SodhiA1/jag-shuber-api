package ca.bc.gov.jag.shuber.persistence.model;

import ca.bc.gov.jag.shuber.persistence.AbstractAuditableVersionable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Type;

/**
 * AssignmentTemplate generated by Hibernate Tools hbm2java.
 *
 * <p>Domain model for database table assignment_template.
 *
 * @author hbm2java
 * @version 344
 */
@Entity
@Table(name = "assignment_template"
    // ,schema="shersched"
)
public class AssignmentTemplate extends AbstractAuditableVersionable implements Serializable {

    /** UID. */
    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(generator = "uuid2")
    @GenericGenerator(name = "uuid2", strategy = "uuid2")
    @Column(name = "assignment_template_id", nullable = false, updatable = false)
    private UUID assignmentTemplateId;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "recurrence_id")
    private Recurrence recurrence;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "shift_template_id")
    private ShiftTemplate shiftTemplate;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "work_section_code")
    private WorkSectionCode workSectionCode;

    @NotNull
    @Type(type = "yes_no")
    @Column(name = "fixed_start_flag", nullable = false, length = 1)
    private Boolean fixedStartFlag;

    @Column(name = "start_hour", precision = 2, scale = 0)
    private Byte startHour;

    @Column(name = "length_hours", precision = 2, scale = 0)
    private Byte lengthHours;

    @Column(name = "shift_id")
    private UUID shiftId;

    @Column(name = "assignment_stream_id")
    private UUID assignmentStreamId;

    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "assignmentTemplate")
    private List<Assignment> assignments = new ArrayList<Assignment>(0);
    /** No args constructor. */
    public AssignmentTemplate() {}

    /** Required args constructor. */
    public AssignmentTemplate(
            UUID assignmentTemplateId,
            Boolean fixedStartFlag,
            String createdBy,
            String updatedBy,
            Date createdDtm,
            Date updatedDtm,
            long revisionCount) {
        this.assignmentTemplateId = assignmentTemplateId;
        this.fixedStartFlag = fixedStartFlag;
        this.createdBy = createdBy;
        this.updatedBy = updatedBy;
        this.createdDtm = createdDtm;
        this.updatedDtm = updatedDtm;
        this.revisionCount = revisionCount;
    }

    /** All args constructor. */
    public AssignmentTemplate(
            UUID assignmentTemplateId,
            Recurrence recurrence,
            ShiftTemplate shiftTemplate,
            WorkSectionCode workSectionCode,
            Boolean fixedStartFlag,
            Byte startHour,
            Byte lengthHours,
            UUID shiftId,
            String createdBy,
            String updatedBy,
            Date createdDtm,
            Date updatedDtm,
            long revisionCount,
            UUID assignmentStreamId,
            List<Assignment> assignments) {
        this.assignmentTemplateId = assignmentTemplateId;
        this.recurrence = recurrence;
        this.shiftTemplate = shiftTemplate;
        this.workSectionCode = workSectionCode;
        this.fixedStartFlag = fixedStartFlag;
        this.startHour = startHour;
        this.lengthHours = lengthHours;
        this.shiftId = shiftId;
        this.createdBy = createdBy;
        this.updatedBy = updatedBy;
        this.createdDtm = createdDtm;
        this.updatedDtm = updatedDtm;
        this.revisionCount = revisionCount;
        this.assignmentStreamId = assignmentStreamId;
        this.assignments = assignments;
    }

    public UUID getAssignmentTemplateId() {
        return this.assignmentTemplateId;
    }

    public void setAssignmentTemplateId(UUID assignmentTemplateId) {
        this.assignmentTemplateId = assignmentTemplateId;
    }

    public Recurrence getRecurrence() {
        return this.recurrence;
    }

    public void setRecurrence(Recurrence recurrence) {
        this.recurrence = recurrence;
    }

    public ShiftTemplate getShiftTemplate() {
        return this.shiftTemplate;
    }

    public void setShiftTemplate(ShiftTemplate shiftTemplate) {
        this.shiftTemplate = shiftTemplate;
    }

    public WorkSectionCode getWorkSectionCode() {
        return this.workSectionCode;
    }

    public void setWorkSectionCode(WorkSectionCode workSectionCode) {
        this.workSectionCode = workSectionCode;
    }

    public Boolean getFixedStartFlag() {
        return this.fixedStartFlag;
    }

    public void setFixedStartFlag(Boolean fixedStartFlag) {
        this.fixedStartFlag = fixedStartFlag;
    }

    public Byte getStartHour() {
        return this.startHour;
    }

    public void setStartHour(Byte startHour) {
        this.startHour = startHour;
    }

    public Byte getLengthHours() {
        return this.lengthHours;
    }

    public void setLengthHours(Byte lengthHours) {
        this.lengthHours = lengthHours;
    }

    public UUID getShiftId() {
        return this.shiftId;
    }

    public void setShiftId(UUID shiftId) {
        this.shiftId = shiftId;
    }

    public UUID getAssignmentStreamId() {
        return this.assignmentStreamId;
    }

    public void setAssignmentStreamId(UUID assignmentStreamId) {
        this.assignmentStreamId = assignmentStreamId;
    }

    public List<Assignment> getAssignments() {
        return this.assignments;
    }

    public void setAssignments(List<Assignment> assignments) {
        this.assignments = assignments;
    }
}
