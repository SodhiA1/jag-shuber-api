package ca.bc.gov.jag.shuber.persistence.model;

import ca.bc.gov.jag.shuber.persistence.AbstractAuditableVersionable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 * LocationCode generated by Hibernate Tools hbm2java.
 *
 * <p>Domain model for database table location_code.
 *
 * @author hbm2java
 * @version 344
 */
@Entity
@Table(name = "location_code"
    // ,schema="shersched"
)
public class LocationCode extends AbstractAuditableVersionable implements Serializable {

    /** UID. */
    private static final long serialVersionUID = 1L;

    @Id
    @Size(min = 1, max = 20)
    @Column(name = "location_code", nullable = false, updatable = false, length = 20)
    private String locationCode;

    @NotEmpty
    @Size(min = 1, max = 200)
    @Column(name = "description", nullable = false, length = 200)
    private String description;

    @NotNull
    @Temporal(TemporalType.DATE)
    @Column(name = "effective_date", nullable = false, length = 13)
    private Date effectiveDate;

    @Temporal(TemporalType.DATE)
    @Column(name = "expiry_date", length = 13)
    private Date expiryDate;

    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "locationCode")
    private List<Location> locations = new ArrayList<Location>(0);
    /** No args constructor. */
    public LocationCode() {}

    /** Required args constructor. */
    public LocationCode(
            String locationCode,
            String description,
            Date effectiveDate,
            String createdBy,
            String updatedBy,
            Date createdDtm,
            Date updatedDtm,
            long revisionCount) {
        this.locationCode = locationCode;
        this.description = description;
        this.effectiveDate = effectiveDate;
        this.createdBy = createdBy;
        this.updatedBy = updatedBy;
        this.createdDtm = createdDtm;
        this.updatedDtm = updatedDtm;
        this.revisionCount = revisionCount;
    }

    /** All args constructor. */
    public LocationCode(
            String locationCode,
            String description,
            Date effectiveDate,
            Date expiryDate,
            String createdBy,
            String updatedBy,
            Date createdDtm,
            Date updatedDtm,
            long revisionCount,
            List<Location> locations) {
        this.locationCode = locationCode;
        this.description = description;
        this.effectiveDate = effectiveDate;
        this.expiryDate = expiryDate;
        this.createdBy = createdBy;
        this.updatedBy = updatedBy;
        this.createdDtm = createdDtm;
        this.updatedDtm = updatedDtm;
        this.revisionCount = revisionCount;
        this.locations = locations;
    }

    public String getLocationCode() {
        return this.locationCode;
    }

    public void setLocationCode(String locationCode) {
        this.locationCode = locationCode;
    }

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Date getEffectiveDate() {
        return this.effectiveDate;
    }

    public void setEffectiveDate(Date effectiveDate) {
        this.effectiveDate = effectiveDate;
    }

    public Date getExpiryDate() {
        return this.expiryDate;
    }

    public void setExpiryDate(Date expiryDate) {
        this.expiryDate = expiryDate;
    }

    public List<Location> getLocations() {
        return this.locations;
    }

    public void setLocations(List<Location> locations) {
        this.locations = locations;
    }
}
