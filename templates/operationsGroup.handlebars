/*****************************AutoGenerated Code : Do not edit *******************************/
// Type generated from Swagger definition

import * as superAgent from "superagent";
import { TOKEN_COOKIE_NAME } from '../common/authentication';
import { retreiveCookieValue } from '../common/cookieUtils';
{{#if imports.types}}
import { 
    {{#joinList imports.types}}

    {{this}}{{/joinList}} 
} from "{{imports.path}}"
{{/if}}

{{#if tag}}
    {{#each tag}}
    {{this}}
    {{/each}}
{{/if}}

export default class {{operationGroup.operationsGroupName}} {
    public errorProcessor: (error:any) => Error = (e)=>e;
    
    constructor(private _agent:superAgent.SuperAgent<any> = superAgent.agent()){
    }

    get agent(){
        return this._agent;
    }

    protected handleResponse<T>(response:superAgent.Response):T{
        return response.body as T;
    }

    protected async ensureToken(): Promise<void> {
        let token = retreiveCookieValue(TOKEN_COOKIE_NAME, this.agent);
        // if there is no token, we will go out and retreive one
        if (token == undefined) {
            console.log('Fetching new token');
            await this.GetToken();
        }
    }

    protected async tryRequest<T>(worker: () => Promise<superAgent.Response>) : Promise<T> {
        try {
            await this.ensureToken();
            const response = await worker();
            return this.handleResponse(response);
        } catch (error) {
            if (this.errorProcessor) {
                throw this.errorProcessor(error);
            } else {
                throw error;
            }
        }
    }

    {{#each operationGroup.operations}}
    public async {{operationName}}({{#joinList operationParams}} {{paramDisplayName}}:{{paramType}} {{/joinList}}):Promise<{{responsesType}}>{
        {{#if operationParams}}
            {{#some operationParams "op=>(!op.inBody && !op.inPath)"}}
        const params = { 
            {{#joinList this ",\n" "op=>(!op.inBody && !op.inPath)"}}
            "{{paramName}}":{{paramDisplayName}}{{/joinList}} 
        };
            {{/some}}
        {{/if}}
        return this.tryRequest<{{responsesType}}>(async () => {
            const response: superAgent.Response = await this.agent.{{httpVerb}}(`{{{toInterpolatedString url}}}`)
                {{#some operationParams "op=>(!op.inBody && !op.inPath)"}}
                .query(params)
                {{/some}}        
                {{#filterList operationParams "op=>op.inBody"}}
                .send({{paramDisplayName}})
                {{/filterList}}
            return response;
        });
    }    
    {{/each}}
}