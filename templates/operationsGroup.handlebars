/*****************************AutoGenerated Code : Do not edit *******************************/
// Type generated from Swagger definition

import * as superAgent from "superagent";
{{#if imports.types}}
import { {{#joinList imports.types}}{{this}}{{/joinList}} } from "{{imports.path}}"
{{/if}}

{{#if tag}}
    {{#each tag}}
    {{this}}
    {{/each}}
{{/if}}

export default class {{operationGroup.operationsGroupName}} {
    public errorProcessor: (error:any) => Error = (e)=>e;
    
    constructor(private _agent:superAgent.SuperAgent<any> = superAgent.agent()){
    }

    get agent(){
        return this._agent;
    }  

    {{#each operationGroup.operations}}
    public async {{operationName}}({{#joinList operationParams}} {{paramDisplayName}}:{{paramType}} {{/joinList}}):Promise<{{responsesType}}>{
        {{#if operationParams}}
            {{#some operationParams "op=>(!op.inBody && !op.inPath)"}}
        const params = { 
            {{#joinList this ",\n" "op=>(!op.inBody && !op.inPath)"}}
            "{{paramName}}":{{paramDisplayName}}{{/joinList}} 
        };
            {{/some}}
        {{/if}}
        try{
            const response = await this.agent.{{httpVerb}}(`{{{toInterpolatedString url}}}`)
                {{#some operationParams "op=>(!op.inBody && !op.inPath)"}}
                .query(params)
                {{/some}}        
                {{#filterList operationParams "op=>op.inBody"}}
                .send({{paramDisplayName}})
                {{/filterList}} 
            return response.body as {{responsesType}};
        }catch(error){
            if(this.errorProcessor){
                throw this.errorProcessor(error);
            }else{
                throw error;
            }
        }
    }    
    {{/each}}
}