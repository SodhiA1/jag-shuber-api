Sheriff Scheduling Liquibase Notes

liquibase folder structure
		.
			 	The core changelogs, including the master, and any changelogs affecting 
			 	database environment or structure
		./data
				Changelogs that create or update the data in code and supporting tables,
				excluding data clearly intended for dev only (e.g. Flintstones characters)
		./dev
				Changelogs that are targeted specifically for non-production environments,
				primarily data
		./useful
				Files for reference, such as templates, or command line samples.
		./docs
				Readme (relevant change history) and usage notes (this file)

Liquibase command line arguments
	  The following arguments are specific to a given environment, and unlikely 
	  to change once configured. Refer to the liquibase 
				driver
				classpath
				changeLogFile
				url
				username - the database user that the liquibase changesets will be 
						applied under, most likely a privileged db user, like postgres
				password - the password for the specified username
		The remaining arguments can be used to affect how the changesets are 
		applied
				contexts - can be used to selectively include or exclude certain
				  	changesets.  See the Contexts section below for more explanation
				  	and a list of the contexts being used in Sheriff Scheduling
				defaultSchemaName - this is the default schema under which objects
						are created in the DB, and where liquibase looks for them, if 
						the schema is not otherwise specified.
						In particular, this effects where the supporting liquibase
						tables 'databasechangelog' and 'databasechangeloglock' are
						created and accessed.  Being able to override this is 
						necessary if you want to run the liquibase changesets against 
						more than one schema within the same database (e.g. for test
						or comparison purposes in the local environment.) It also may 
						be prudent in a production environment not to create the 
						liquibase tables in a common system schema.
				logLevel - This determines how much info is output by the liquibase
						command. The default is fine for most contexts, but does
						unfortunately exclude any messages defined within the 
						changesets, such as for preconditions. 
						Allowable values are debug, info, warning, severe, off.

Liquibase Script Parameters

Script parameters can be passed on the command line using -D<param_name>, and the values
referenced within the script using ${<param_name>}
The following parameters are referenced within the liquibase changesets for Sheriff Scheduling

	  POSTGRES_EXT_SCHEMA
		    This parameter tells liquibase in what schema any extensions are installed.
		    Specifically, for Sheriff Scheduling, we use the uuid-ossp extension for 
		    generating UUIDs in changesets for creating data.  
		    The db-env (formerly roles) changelog uses this parameter to check for the
		    existence of the required extension in the expected schema, and installs
		    it there if 
	  POSTGRES_SCHEMA
	  		This parameter specifies the schema in which any database objects should
	  		be created or referenced.  Note that in PostgreSQL, the concept of a
	  		schema is distinct from a user that has privileges to access the database.
	  		This schema is created, if not already present, in the db-env changelog.
	  POSTGRES_APP_USER
	  		This parameter specifies the user that the shersched api will use to 
	  		access the database.
	  		This user is created, if not already present, in the db-env changelog.
	  POSTGRES_APP_PASS
	  		This parameter specifies the password that should be set for the user
	  		specified above.
	  		
		RELEASE_TAG (proposed)
				This parameter could potentially be used to allow a database tag to be
				applied that relates to a specific deployment, to facilitate a rollback
				of a deployment.
				There are some kinks to be worked out and understood before this can
				be relied upon, but I am noting the idea here for reference.

Preconditions and error handling

		Liqubase allows for having preconditions for a given changeSet, to alter
		execution of the script based on the current context (e.g. checking that
		a changeset to add a new column has been run before running changesets
		to populate that column.)  You can specify different behaviour if the
		precondition is not met. You can also specify a custom message to output.
		Unfortunately, the custom message will only be output if the appropriate
		logLevel is set on the command line.
		
		Liquibase provides a 'stop' change that can be used to interrupt 
		processing of a change log (e.g. to test up to a certain point). 
		Unfortunately, contrary to the documentation, the optional message
		attribute to spit out a comment raises an error in liquibase.  A
		commented example of a stop changeSet is included in the master
		changelog, and can be copied where needed for troubleshooting.

Contexts
		prod
		dev
		cleandev
		deprecated

Changelog conventions
		filenames
	  start and end tags
	  ids
	  
Refactoring changelogs
    logicalFilePath